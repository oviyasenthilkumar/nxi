generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model AttributeDefinition {
  id        String   @id @default(uuid())
  name      String   @unique
  label     String
  type      String
  required  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NestedItem {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  parentId    Int?
  attributes  String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  parent      NestedItem?  @relation("NestedItemToNestedItem", fields: [parentId], references: [id])
  children    NestedItem[] @relation("NestedItemToNestedItem")
}

model Project {
  id           String        @id @default(uuid())
  name         String
  description  String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  nestedArrays NestedArray[]
}

model NestedArray {
  id           String        @id @default(uuid())
  name         String
  description  String
  parentId     String?
  attributes   String
  projectId    String
  userId       String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  associations Association[]
  user         User?         @relation(fields: [userId], references: [id])
  project      Project       @relation(fields: [projectId], references: [id])
  parent       NestedArray?  @relation("NestedArrayHierarchy", fields: [parentId], references: [id])
  children     NestedArray[] @relation("NestedArrayHierarchy")
}

model Association {
  id             String                 @id @default(uuid())
  name           String
  description    String
  userId         String
  items          String
  nestedArrayId  String
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  nestedArray    NestedArray            @relation(fields: [nestedArrayId], references: [id])
  user           User                   @relation(fields: [userId], references: [id])
  processingTabs ProcessingTabulation[]
}

model ProcessingTabulation {
  id                String      @id @default(uuid())
  associationId     String
  scope             String
  limits            String
  processingDetails String
  suc               Int
  inputs            String
  processingBrief   String
  outputs           String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  association       Association @relation(fields: [associationId], references: [id])
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  name         String
  password     String
  role         String        @default("USER")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  associations Association[]
  nestedArrays NestedArray[]
}